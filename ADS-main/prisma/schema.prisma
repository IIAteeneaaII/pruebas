// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  userName       String
  email          String      @unique
  password       String
  createdAt      DateTime    @default(now())
  morningHour    Int         @default(8)
  afternoonHour  Int         @default(13)
  nightHour      Int         @default(21)
  habits         UserHabit[]
  profilePic     String?
  notifications  Notification[]
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  readAt      DateTime?
}

model HabitTemplate {
  id                Int                    @id @default(autoincrement())
  name              String
  description       String
  category          String
  defaultFrequency  Json
  hasCustomFields   Boolean
  fields            HabitTemplateField[]
  userHabits        UserHabit[]
}

model HabitTemplateField {
  id              Int                   @id @default(autoincrement())
  templateId      Int
  template        HabitTemplate         @relation(fields: [templateId], references: [id])
  name            String
  fieldType       String
  unit            String?
  fieldValues     UserHabitFieldValue[]
}

model UserHabit {
  id              Int                   @id @default(autoincrement())
  userId          Int
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitTemplateId Int?
  habitTemplate   HabitTemplate?        @relation(fields: [habitTemplateId], references: [id])
  name            String
  description     String?
  icon            String
  frequency       Json
  reminder        Boolean               @default(true)
  fieldValues     Json?
  startDate       DateTime
  isActive        Boolean               @default(true)
  customValues    UserHabitFieldValue[]
  logs            HabitTrackingLog[]
}

model UserHabitFieldValue {
  id              Int                   @id @default(autoincrement())
  userHabitId     Int
  userHabit       UserHabit             @relation(fields: [userHabitId], references: [id], onDelete: Cascade)
  templateFieldId Int
  templateField   HabitTemplateField    @relation(fields: [templateFieldId], references: [id])
  value           String
}

model HabitTrackingLog {
  id           Int        @id @default(autoincrement())
  userHabitId  Int
  userHabit    UserHabit  @relation(fields: [userHabitId], references: [id], onDelete: Cascade)
  date         DateTime
  status       String
  notes        String?
  fieldValues  Json

  @@unique([userHabitId, date])
}
